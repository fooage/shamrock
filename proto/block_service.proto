syntax = "proto3";

package block_service;

option go_package = "./block_service";

service BlockService {
  // To obtain object block according to unique key, can set whether to pull from the Master node.
  rpc FetchBlock(FetchBlockReq) returns (FetchBlockResp) {}
  // Store the object block to the Block service group.
  rpc StoreBlock(StoreBlockReq) returns (StoreBlockResp) {}
  // Delete object block by unique key.
  rpc DeleteBlock(DeleteBlockReq) returns (DeleteBlockResp) {}
}

message BlockEntry {
  string unique_key = 1; // block entry's unique key
  string hash = 2; // hash of this block for data validation
  bytes binary = 3; // the binary data of the block
}

message FetchBlockReq {
  string unique_key = 1;
  bool from_master = 2;
}

message FetchBlockResp {
  BlockEntry entry = 1;
}

// When the unique key here is the same, the file will be overwritten.
message StoreBlockReq {
  BlockEntry entry = 1;
}

message StoreBlockResp {}

message DeleteBlockReq {
  string unique_key = 1;
}

message DeleteBlockResp {}

// The block storage service needs to report the service health status to the
// meta information service for scheduling.
message HealthReport {
  string address = 1;
  int64 store_group = 2;
  int64 store_node = 3;
  int64 capacity = 4;
  int64 capacity_used = 5;
}